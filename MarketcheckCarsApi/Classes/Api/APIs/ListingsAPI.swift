//
// ListingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ListingsAPI {
    /**
     Listing by id
     
     - parameter _id: (path) Listing id to get all the listing attributes 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListing(_id: String, apiKey: String? = nil, completion: @escaping ((_ data: Listing?,_ error: Error?) -> Void)) {
        getListingWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Listing by id
     - GET /listing/{id}
     - Get a particular listing by its id
     - examples: [{contentType=application/json, example={
  "scraped_at_date" : 0.80082819046101150206595775671303272247314453125,
  "stock_no" : "stock_no",
  "dom" : 5.962133916683182377482808078639209270477294921875,
  "car_location" : {
    "zip" : "zip",
    "city" : "city",
    "latitude" : 9.301444243932576,
    "state" : "state",
    "longitude" : 3.616076749251911
  },
  "is_certified" : 1,
  "source" : "source",
  "media" : {
    "photo_links" : [ "photo_links", "photo_links" ],
    "photo_link" : "photo_link"
  },
  "miles" : "miles",
  "last_seen_at_date" : "last_seen_at_date",
  "price" : "price",
  "msrp" : "msrp",
  "extra" : {
    "features" : [ "features", "features" ],
    "seller_comment" : "seller_comment",
    "options" : [ "options", "options" ]
  },
  "seller_type" : "seller_type",
  "vin" : "vin",
  "id" : "id",
  "first_seen_at_date" : "first_seen_at_date",
  "heading" : "heading",
  "first_seen_at" : 6.02745618307040320615897144307382404804229736328125,
  "vdp_url" : "vdp_url",
  "dom_180" : 5.63737665663332876420099637471139430999755859375,
  "build" : {
    "std_seating" : "std_seating",
    "year" : 2.027123023002321833274663731572218239307403564453125,
    "engine_aspiration" : "engine_aspiration",
    "city_miles" : "city_miles",
    "steering_type" : "steering_type",
    "overall_height" : "overall_height",
    "engine_block" : "engine_block",
    "transmission" : "transmission",
    "trim" : "trim",
    "engine" : "engine",
    "antibrake_sys" : "antibrake_sys",
    "body_type" : "body_type",
    "model" : "model",
    "fuel_type" : "fuel_type",
    "make" : "make",
    "overall_width" : "overall_width",
    "vehicle_type" : "vehicle_type",
    "drivetrain" : "drivetrain",
    "cylinders" : 7.3862819483858839220147274318151175975799560546875,
    "doors" : 4.1456080298839363962315474054776132106781005859375,
    "made_in" : "made_in",
    "overall_length" : "overall_length",
    "engine_size" : "engine_size",
    "engine_measure" : "engine_measure",
    "tank_size" : "tank_size",
    "highway_miles" : "highway_miles"
  },
  "dom_active" : 2.3021358869347654518833223846741020679473876953125,
  "dealer" : {
    "zip" : "zip",
    "target_url_used" : "target_url_used",
    "city" : "city",
    "latitude" : "latitude",
    "rating" : 1.231513536777255612975068288506008684635162353515625,
    "dealer_type" : "independent",
    "car_type" : "car_type",
    "target_url_new" : "target_url_new",
    "franchise_id" : "franchise_id",
    "phone" : "phone",
    "street" : "street",
    "name" : "name",
    "target_url_certified" : "target_url_certified",
    "id" : "id",
    "state" : "state",
    "longitude" : "longitude"
  },
  "inventory_type" : "inventory_type",
  "last_seen_at" : 7.061401241503109105224211816675961017608642578125
}}]
     
     - parameter _id: (path) Listing id to get all the listing attributes 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)

     - returns: RequestBuilder<Listing> 
     */
    open class func getListingWithRequestBuilder(_id: String, apiKey: String? = nil) -> RequestBuilder<Listing> {
        var path = "/listing/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey
        ])
        

        let requestBuilder: RequestBuilder<Listing>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Long text Listings attributes for Listing with the given id
     
     - parameter _id: (path) Listing id to get all the long text listing attributes 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListingExtra(_id: String, apiKey: String? = nil, completion: @escaping ((_ data: ListingExtraAttributes?,_ error: Error?) -> Void)) {
        getListingExtraWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Long text Listings attributes for Listing with the given id
     - GET /listing/{id}/extra
     - Get listing options, features, seller comments
     - examples: [{contentType=application/json, example={
  "features" : [ "features", "features" ],
  "seller_comment" : "seller_comment",
  "options" : [ "options", "options" ]
}}]
     
     - parameter _id: (path) Listing id to get all the long text listing attributes 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)

     - returns: RequestBuilder<ListingExtraAttributes> 
     */
    open class func getListingExtraWithRequestBuilder(_id: String, apiKey: String? = nil) -> RequestBuilder<ListingExtraAttributes> {
        var path = "/listing/{id}/extra"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey
        ])
        

        let requestBuilder: RequestBuilder<ListingExtraAttributes>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Listing media by id
     
     - parameter _id: (path) Listing id to get all the listing attributes 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListingMedia(_id: String, apiKey: String? = nil, completion: @escaping ((_ data: ListingMedia?,_ error: Error?) -> Void)) {
        getListingMediaWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Listing media by id
     - GET /listing/{id}/media
     - Get listing media (photo, photos) by id
     - examples: [{contentType=application/json, example={
  "photo_links" : [ "photo_links", "photo_links" ],
  "photo_link" : "photo_link"
}}]
     
     - parameter _id: (path) Listing id to get all the listing attributes 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)

     - returns: RequestBuilder<ListingMedia> 
     */
    open class func getListingMediaWithRequestBuilder(_id: String, apiKey: String? = nil) -> RequestBuilder<ListingMedia> {
        var path = "/listing/{id}/media"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey
        ])
        

        let requestBuilder: RequestBuilder<ListingMedia>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get listing HTML
     
     - parameter _id: (path) Listing id to get the vehicle details page (VDP) HTML 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter html: (query) Get only HTML for given listings VDP page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListingVDP(_id: String, apiKey: String? = nil, html: String? = nil, completion: @escaping ((_ data: ListingVDP?,_ error: Error?) -> Void)) {
        getListingVDPWithRequestBuilder(_id: _id, apiKey: apiKey, html: html).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get listing HTML
     - GET /listing/{id}/vdp
     - Cached HTML of the Vehicle Details Page (VDP) for the listing. The HTML is cached only for 7 days for all listings. So this API could be used to get HTML of mostly active listings and that have recently expired
     - examples: [{contentType=application/json, example={
  "vdp_url" : "vdp_url",
  "html" : "html",
  "crawled_at" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter _id: (path) Listing id to get the vehicle details page (VDP) HTML 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter html: (query) Get only HTML for given listings VDP page (optional)

     - returns: RequestBuilder<ListingVDP> 
     */
    open class func getListingVDPWithRequestBuilder(_id: String, apiKey: String? = nil, html: String? = nil) -> RequestBuilder<ListingVDP> {
        var path = "/listing/{id}/vdp"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "html": html
        ])
        

        let requestBuilder: RequestBuilder<ListingVDP>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Summary Report
     
     - parameter vin: (query) VIN as a reference to the type of car for which Summary data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSummaryReport(vin: String, apiKey: String? = nil, completion: @escaping ((_ data: [VinReport]?,_ error: Error?) -> Void)) {
        getSummaryReportWithRequestBuilder(vin: vin, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Summary Report
     - GET /vin_report_summary
     - [MOCK] Generate Summary report
     - examples: [{contentType=application/json, example=[ {
  "icon" : "icon",
  "some_text" : "some_text"
}, {
  "icon" : "icon",
  "some_text" : "some_text"
} ]}]
     
     - parameter vin: (query) VIN as a reference to the type of car for which Summary data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)

     - returns: RequestBuilder<[VinReport]> 
     */
    open class func getSummaryReportWithRequestBuilder(vin: String, apiKey: String? = nil) -> RequestBuilder<[VinReport]> {
        let path = "/vin_report_summary"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin
        ])
        

        let requestBuilder: RequestBuilder<[VinReport]>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter carType
     */
    public enum CarType_search: String { 
        case new = "new"
        case used = "used"
        case certified = "certified"
    }

    /**
     Gets active car listings for the given search criteria
     
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter latitude: (query) Latitude component of location (optional)
     - parameter longitude: (query) Longitude component of location (optional)
     - parameter radius: (query) Radius around the search location (optional)
     - parameter carType: (query) Car type. Allowed values are - new / used / certified (optional)
     - parameter sellerType: (query) Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
     - parameter year: (query) Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
     - parameter make: (query) Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
     - parameter model: (query) Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
     - parameter trim: (query) Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
     - parameter dealerId: (query) Dealer id to filter the cars. (optional)
     - parameter vin: (query) Car vin to search (optional)
     - parameter source: (query) Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
     - parameter bodyType: (query) Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
     - parameter bodySubtype: (query) Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     - parameter vehicleType: (query) Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
     - parameter vins: (query) Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     - parameter taxonomyVins: (query) Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     - parameter ymmt: (query) Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     - parameter match: (query) Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     - parameter cylinders: (query) Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
     - parameter transmission: (query) Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
     - parameter speeds: (query) Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
     - parameter doors: (query) Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     - parameter drivetrain: (query) Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
     - parameter exteriorColor: (query) Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     - parameter interiorColor: (query) Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     - parameter engine: (query) Filter listings on engine (optional)
     - parameter engineType: (query) Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
     - parameter engineAspiration: (query) Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     - parameter engineBlock: (query) Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     - parameter milesRange: (query) Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     - parameter priceRange: (query) Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     - parameter domRange: (query) Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     - parameter sortBy: (query) Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
     - parameter sortOrder: (query) Sort order - asc or desc. Default sort order is distance from a point. (optional)
     - parameter rows: (query) Number of results to return. Default is 10. Max is 50 (optional)
     - parameter start: (query) Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     - parameter facets: (query) The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     - parameter stats: (query) The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     - parameter country: (query) Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
     - parameter plot: (query) If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     - parameter nodedup: (query) If nodedup is set to true then will give results using is_searchable (optional)
     - parameter state: (query) Filter listsings on State (optional)
     - parameter city: (query) Filter listings on city (optional)
     - parameter dealerName: (query) Filter listings on dealer_name (optional)
     - parameter trimO: (query) Filter listings on web scraped trim (optional)
     - parameter trimR: (query) Filter trim on custom possible matches (optional)
     - parameter domActiveRange: (query) Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     - parameter dom180Range: (query) Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     - parameter options: (query) Tokenizer search on options for multiple options use | as seperator (optional)
     - parameter features: (query) Tokenizer search on features for multiple options use | as seperator (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, carType: CarType_search? = nil, sellerType: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, dealerId: String? = nil, vin: String? = nil, source: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, speeds: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, engine: String? = nil, engineType: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, milesRange: String? = nil, priceRange: String? = nil, domRange: String? = nil, sortBy: String? = nil, sortOrder: String? = nil, rows: Int? = nil, start: Int? = nil, facets: String? = nil, stats: String? = nil, country: String? = nil, plot: String? = nil, nodedup: String? = nil, state: String? = nil, city: String? = nil, dealerName: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, options: String? = nil, features: String? = nil, completion: @escaping ((_ data: SearchResponse?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(apiKey: apiKey, latitude: latitude, longitude: longitude, radius: radius, carType: carType, sellerType: sellerType, year: year, make: make, model: model, trim: trim, dealerId: dealerId, vin: vin, source: source, bodyType: bodyType, bodySubtype: bodySubtype, vehicleType: vehicleType, vins: vins, taxonomyVins: taxonomyVins, ymmt: ymmt, match: match, cylinders: cylinders, transmission: transmission, speeds: speeds, doors: doors, drivetrain: drivetrain, exteriorColor: exteriorColor, interiorColor: interiorColor, engine: engine, engineType: engineType, engineAspiration: engineAspiration, engineBlock: engineBlock, milesRange: milesRange, priceRange: priceRange, domRange: domRange, sortBy: sortBy, sortOrder: sortOrder, rows: rows, start: start, facets: facets, stats: stats, country: country, plot: plot, nodedup: nodedup, state: state, city: city, dealerName: dealerName, trimO: trimO, trimR: trimR, domActiveRange: domActiveRange, dom180Range: dom180Range, options: options, features: features).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets active car listings for the given search criteria
     - GET /search
     - This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 1000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom/msrp for your search
     - examples: [{contentType=application/json, example={
  "listings" : [ {
    "ref_miles_dt" : 2,
    "scraped_at_date" : 1.46581298050294517310021547018550336360931396484375,
    "stock_no" : "stock_no",
    "dom" : 7.061401241503109105224211816675961017608642578125,
    "distance" : 1.489415909854170383397331534069962799549102783203125,
    "is_certified" : 1,
    "ref_miles" : "ref_miles",
    "source" : "source",
    "media" : {
      "photo_links" : [ "photo_links", "photo_links" ],
      "photo_link" : "photo_link"
    },
    "miles" : "miles",
    "last_seen_at_date" : "last_seen_at_date",
    "price" : "price",
    "seller_type" : "seller_type",
    "vin" : "vin",
    "ref_price" : "ref_price",
    "id" : "id",
    "first_seen_at_date" : "first_seen_at_date",
    "interior_color" : "interior_color",
    "heading" : "heading",
    "ref_price_dt" : 5,
    "first_seen_at" : 5.962133916683182377482808078639209270477294921875,
    "dom_180" : 9.301444243932575517419536481611430644989013671875,
    "vdp_url" : "vdp_url",
    "exterior_color" : "exterior_color",
    "build" : {
      "std_seating" : "std_seating",
      "year" : 2.027123023002321833274663731572218239307403564453125,
      "engine_aspiration" : "engine_aspiration",
      "city_miles" : "city_miles",
      "steering_type" : "steering_type",
      "overall_height" : "overall_height",
      "engine_block" : "engine_block",
      "transmission" : "transmission",
      "trim" : "trim",
      "engine" : "engine",
      "antibrake_sys" : "antibrake_sys",
      "body_type" : "body_type",
      "model" : "model",
      "fuel_type" : "fuel_type",
      "make" : "make",
      "overall_width" : "overall_width",
      "vehicle_type" : "vehicle_type",
      "drivetrain" : "drivetrain",
      "cylinders" : 7.3862819483858839220147274318151175975799560546875,
      "doors" : 4.1456080298839363962315474054776132106781005859375,
      "made_in" : "made_in",
      "overall_length" : "overall_length",
      "engine_size" : "engine_size",
      "engine_measure" : "engine_measure",
      "tank_size" : "tank_size",
      "highway_miles" : "highway_miles"
    },
    "dom_active" : 3.61607674925191080461672754609026014804840087890625,
    "dealer" : {
      "zip" : "zip",
      "target_url_used" : "target_url_used",
      "city" : "city",
      "latitude" : "latitude",
      "rating" : 1.231513536777255612975068288506008684635162353515625,
      "dealer_type" : "independent",
      "car_type" : "car_type",
      "target_url_new" : "target_url_new",
      "franchise_id" : "franchise_id",
      "phone" : "phone",
      "street" : "street",
      "name" : "name",
      "target_url_certified" : "target_url_certified",
      "id" : "id",
      "state" : "state",
      "longitude" : "longitude"
    },
    "inventory_type" : "inventory_type",
    "last_seen_at" : 6.02745618307040320615897144307382404804229736328125
  }, {
    "ref_miles_dt" : 2,
    "scraped_at_date" : 1.46581298050294517310021547018550336360931396484375,
    "stock_no" : "stock_no",
    "dom" : 7.061401241503109105224211816675961017608642578125,
    "distance" : 1.489415909854170383397331534069962799549102783203125,
    "is_certified" : 1,
    "ref_miles" : "ref_miles",
    "source" : "source",
    "media" : {
      "photo_links" : [ "photo_links", "photo_links" ],
      "photo_link" : "photo_link"
    },
    "miles" : "miles",
    "last_seen_at_date" : "last_seen_at_date",
    "price" : "price",
    "seller_type" : "seller_type",
    "vin" : "vin",
    "ref_price" : "ref_price",
    "id" : "id",
    "first_seen_at_date" : "first_seen_at_date",
    "interior_color" : "interior_color",
    "heading" : "heading",
    "ref_price_dt" : 5,
    "first_seen_at" : 5.962133916683182377482808078639209270477294921875,
    "dom_180" : 9.301444243932575517419536481611430644989013671875,
    "vdp_url" : "vdp_url",
    "exterior_color" : "exterior_color",
    "build" : {
      "std_seating" : "std_seating",
      "year" : 2.027123023002321833274663731572218239307403564453125,
      "engine_aspiration" : "engine_aspiration",
      "city_miles" : "city_miles",
      "steering_type" : "steering_type",
      "overall_height" : "overall_height",
      "engine_block" : "engine_block",
      "transmission" : "transmission",
      "trim" : "trim",
      "engine" : "engine",
      "antibrake_sys" : "antibrake_sys",
      "body_type" : "body_type",
      "model" : "model",
      "fuel_type" : "fuel_type",
      "make" : "make",
      "overall_width" : "overall_width",
      "vehicle_type" : "vehicle_type",
      "drivetrain" : "drivetrain",
      "cylinders" : 7.3862819483858839220147274318151175975799560546875,
      "doors" : 4.1456080298839363962315474054776132106781005859375,
      "made_in" : "made_in",
      "overall_length" : "overall_length",
      "engine_size" : "engine_size",
      "engine_measure" : "engine_measure",
      "tank_size" : "tank_size",
      "highway_miles" : "highway_miles"
    },
    "dom_active" : 3.61607674925191080461672754609026014804840087890625,
    "dealer" : {
      "zip" : "zip",
      "target_url_used" : "target_url_used",
      "city" : "city",
      "latitude" : "latitude",
      "rating" : 1.231513536777255612975068288506008684635162353515625,
      "dealer_type" : "independent",
      "car_type" : "car_type",
      "target_url_new" : "target_url_new",
      "franchise_id" : "franchise_id",
      "phone" : "phone",
      "street" : "street",
      "name" : "name",
      "target_url_certified" : "target_url_certified",
      "id" : "id",
      "state" : "state",
      "longitude" : "longitude"
    },
    "inventory_type" : "inventory_type",
    "last_seen_at" : 6.02745618307040320615897144307382404804229736328125
  } ],
  "num_found" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter latitude: (query) Latitude component of location (optional)
     - parameter longitude: (query) Longitude component of location (optional)
     - parameter radius: (query) Radius around the search location (optional)
     - parameter carType: (query) Car type. Allowed values are - new / used / certified (optional)
     - parameter sellerType: (query) Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
     - parameter year: (query) Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
     - parameter make: (query) Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
     - parameter model: (query) Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
     - parameter trim: (query) Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
     - parameter dealerId: (query) Dealer id to filter the cars. (optional)
     - parameter vin: (query) Car vin to search (optional)
     - parameter source: (query) Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
     - parameter bodyType: (query) Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
     - parameter bodySubtype: (query) Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     - parameter vehicleType: (query) Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
     - parameter vins: (query) Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     - parameter taxonomyVins: (query) Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     - parameter ymmt: (query) Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     - parameter match: (query) Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     - parameter cylinders: (query) Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
     - parameter transmission: (query) Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
     - parameter speeds: (query) Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
     - parameter doors: (query) Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     - parameter drivetrain: (query) Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
     - parameter exteriorColor: (query) Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     - parameter interiorColor: (query) Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     - parameter engine: (query) Filter listings on engine (optional)
     - parameter engineType: (query) Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
     - parameter engineAspiration: (query) Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     - parameter engineBlock: (query) Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     - parameter milesRange: (query) Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     - parameter priceRange: (query) Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     - parameter domRange: (query) Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     - parameter sortBy: (query) Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
     - parameter sortOrder: (query) Sort order - asc or desc. Default sort order is distance from a point. (optional)
     - parameter rows: (query) Number of results to return. Default is 10. Max is 50 (optional)
     - parameter start: (query) Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     - parameter facets: (query) The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     - parameter stats: (query) The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     - parameter country: (query) Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
     - parameter plot: (query) If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     - parameter nodedup: (query) If nodedup is set to true then will give results using is_searchable (optional)
     - parameter state: (query) Filter listsings on State (optional)
     - parameter city: (query) Filter listings on city (optional)
     - parameter dealerName: (query) Filter listings on dealer_name (optional)
     - parameter trimO: (query) Filter listings on web scraped trim (optional)
     - parameter trimR: (query) Filter trim on custom possible matches (optional)
     - parameter domActiveRange: (query) Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     - parameter dom180Range: (query) Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     - parameter options: (query) Tokenizer search on options for multiple options use | as seperator (optional)
     - parameter features: (query) Tokenizer search on features for multiple options use | as seperator (optional)

     - returns: RequestBuilder<SearchResponse> 
     */
    open class func searchWithRequestBuilder(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, carType: CarType_search? = nil, sellerType: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, dealerId: String? = nil, vin: String? = nil, source: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, speeds: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, engine: String? = nil, engineType: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, milesRange: String? = nil, priceRange: String? = nil, domRange: String? = nil, sortBy: String? = nil, sortOrder: String? = nil, rows: Int? = nil, start: Int? = nil, facets: String? = nil, stats: String? = nil, country: String? = nil, plot: String? = nil, nodedup: String? = nil, state: String? = nil, city: String? = nil, dealerName: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, options: String? = nil, features: String? = nil) -> RequestBuilder<SearchResponse> {
        let path = "/search"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "latitude": latitude, 
            "longitude": longitude, 
            "radius": radius?.encodeToJSON(), 
            "car_type": carType?.rawValue, 
            "seller_type": sellerType, 
            "year": year, 
            "make": make, 
            "model": model, 
            "trim": trim, 
            "dealer_id": dealerId, 
            "vin": vin, 
            "source": source, 
            "body_type": bodyType, 
            "body_subtype": bodySubtype, 
            "vehicle_type": vehicleType, 
            "vins": vins, 
            "taxonomy_vins": taxonomyVins, 
            "ymmt": ymmt, 
            "match": match, 
            "cylinders": cylinders, 
            "transmission": transmission, 
            "speeds": speeds, 
            "doors": doors, 
            "drivetrain": drivetrain, 
            "exterior_color": exteriorColor, 
            "interior_color": interiorColor, 
            "engine": engine, 
            "engine_type": engineType, 
            "engine_aspiration": engineAspiration, 
            "engine_block": engineBlock, 
            "miles_range": milesRange, 
            "price_range": priceRange, 
            "dom_range": domRange, 
            "sort_by": sortBy, 
            "sort_order": sortOrder, 
            "rows": rows?.encodeToJSON(), 
            "start": start?.encodeToJSON(), 
            "facets": facets, 
            "stats": stats, 
            "country": country, 
            "plot": plot, 
            "nodedup": nodedup, 
            "state": state, 
            "city": city, 
            "dealer_name": dealerName, 
            "trim_o": trimO, 
            "trim_r": trimR, 
            "dom_active_range": domActiveRange, 
            "dom_180_range": dom180Range, 
            "options": options, 
            "features": features
        ])
        

        let requestBuilder: RequestBuilder<SearchResponse>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
