//
// GraphsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class GraphsAPI {
    /**
     Price, Miles plots data for given criteria
     
     - parameter carType: (query) Car type to get the scatter plot data for 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter vin: (query) VIN as a reference to the type of car for which plot data is to be returned (optional)
     - parameter year: (query) Year of the car (optional)
     - parameter make: (query) Make of the car (optional)
     - parameter model: (query) Model of the Car (optional)
     - parameter trim: (query) Trim of the Car (optional)
     - parameter rows: (query) Number of results to return. Default is 1000. Max is 10000 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPriceMilesPlotData(carType: String, apiKey: String? = nil, vin: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, rows: Int? = nil, completion: @escaping ((_ data: [PlotPoint]?,_ error: Error?) -> Void)) {
        getPriceMilesPlotDataWithRequestBuilder(carType: carType, apiKey: apiKey, vin: vin, year: year, make: make, model: model, trim: trim, rows: rows).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Price, Miles plots data for given criteria
     - GET /plots
     - [DEPRECIATED Please check this in /search API using plot=true]Get price, miles plot data for active cars matching the given VIN's basic specification or Year, Make, Model, Trim (Optional) criteria
     - examples: [{contentType=application/json, example=[ {
  "dom" : 5.962133916683182377482808078639209270477294921875,
  "seller_name" : "seller_name",
  "price" : 0.80082819046101150206595775671303272247314453125,
  "msrp" : 1.46581298050294517310021547018550336360931396484375,
  "vin" : "vin",
  "id" : "id",
  "miles" : 6.02745618307040320615897144307382404804229736328125
}, {
  "dom" : 5.962133916683182377482808078639209270477294921875,
  "seller_name" : "seller_name",
  "price" : 0.80082819046101150206595775671303272247314453125,
  "msrp" : 1.46581298050294517310021547018550336360931396484375,
  "vin" : "vin",
  "id" : "id",
  "miles" : 6.02745618307040320615897144307382404804229736328125
} ]}]
     
     - parameter carType: (query) Car type to get the scatter plot data for 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter vin: (query) VIN as a reference to the type of car for which plot data is to be returned (optional)
     - parameter year: (query) Year of the car (optional)
     - parameter make: (query) Make of the car (optional)
     - parameter model: (query) Model of the Car (optional)
     - parameter trim: (query) Trim of the Car (optional)
     - parameter rows: (query) Number of results to return. Default is 1000. Max is 10000 (optional)

     - returns: RequestBuilder<[PlotPoint]> 
     */
    open class func getPriceMilesPlotDataWithRequestBuilder(carType: String, apiKey: String? = nil, vin: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, rows: Int? = nil) -> RequestBuilder<[PlotPoint]> {
        let path = "/plots"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin, 
            "year": year, 
            "make": make, 
            "model": model, 
            "trim": trim, 
            "car_type": carType, 
            "rows": rows?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[PlotPoint]>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
