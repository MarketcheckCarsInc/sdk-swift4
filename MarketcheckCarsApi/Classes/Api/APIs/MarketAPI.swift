//
// MarketAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MarketAPI {
    /**
     [MOCK] Get Averages for YMM
     
     - parameter vin: (query) VIN as a reference to the type of car for which averages data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter year: (query) Year of the car (optional)
     - parameter make: (query) Make of the car (optional)
     - parameter model: (query) Model of the Car (optional)
     - parameter trim: (query) Trim of the Car (optional)
     - parameter fields: (query) Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAverages(vin: String, apiKey: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, fields: String? = nil, completion: @escaping ((_ data: Averages?,_ error: Error?) -> Void)) {
        getAveragesWithRequestBuilder(vin: vin, apiKey: apiKey, year: year, make: make, model: model, trim: trim, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     [MOCK] Get Averages for YMM
     - GET /averages
     - [Merged with the /search API - Please check the 'stats' parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN's basic specification or Year, Make, Model, Trim (Optional) criteria
     - examples: [{contentType=application/json, example={
  "dom" : 5.962133916683182377482808078639209270477294921875,
  "price" : 0.80082819046101150206595775671303272247314453125,
  "msrp" : 6.02745618307040320615897144307382404804229736328125,
  "units" : 2.3021358869347654518833223846741020679473876953125,
  "age" : 5.63737665663332876420099637471139430999755859375,
  "miles" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter vin: (query) VIN as a reference to the type of car for which averages data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter year: (query) Year of the car (optional)
     - parameter make: (query) Make of the car (optional)
     - parameter model: (query) Model of the Car (optional)
     - parameter trim: (query) Trim of the Car (optional)
     - parameter fields: (query) Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market) (optional)

     - returns: RequestBuilder<Averages> 
     */
    open class func getAveragesWithRequestBuilder(vin: String, apiKey: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, fields: String? = nil) -> RequestBuilder<Averages> {
        let path = "/averages"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin, 
            "year": year, 
            "make": make, 
            "model": model, 
            "trim": trim, 
            "fields": fields
        ])
        

        let requestBuilder: RequestBuilder<Averages>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Compare market
     
     - parameter vin: (query) VIN as a reference to the type of car for which comparison data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComparison(vin: String, apiKey: String? = nil, completion: @escaping ((_ data: ComparisonPoint?,_ error: Error?) -> Void)) {
        getComparisonWithRequestBuilder(vin: vin, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Compare market
     - GET /comparison
     - [MOCK] Get historical market trends for cars matching the given VIN's basic specification or Year, Make, Model, Trim (Optional) criteria
     - examples: [{contentType=application/json, example={
  "dealer_indicator" : "dealer_indicator",
  "vin_price" : 6.02745618307040320615897144307382404804229736328125,
  "fair_deal_price" : 1.46581298050294517310021547018550336360931396484375,
  "similar_vehicles_count" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter vin: (query) VIN as a reference to the type of car for which comparison data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)

     - returns: RequestBuilder<ComparisonPoint> 
     */
    open class func getComparisonWithRequestBuilder(vin: String, apiKey: String? = nil) -> RequestBuilder<ComparisonPoint> {
        let path = "/comparison"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin
        ])
        

        let requestBuilder: RequestBuilder<ComparisonPoint>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Competitors
     
     - parameter vin: (query) VIN as a reference to the type of car for which competitors data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCompetition(vin: String, apiKey: String? = nil, completion: @escaping ((_ data: CompetitorsPoint?,_ error: Error?) -> Void)) {
        getCompetitionWithRequestBuilder(vin: vin, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Competitors
     - GET /competition
     - [MOCK] Competitor cars in market for current vin
     - examples: [{contentType=application/json, example={
  "same_car_models" : [ {
    "avg_market_value" : 2.3021358869347654518833223846741020679473876953125,
    "name" : "name",
    "avg_miles" : 5.63737665663332876420099637471139430999755859375,
    "avg_price" : 5.962133916683182377482808078639209270477294921875
  }, {
    "avg_market_value" : 2.3021358869347654518833223846741020679473876953125,
    "name" : "name",
    "avg_miles" : 5.63737665663332876420099637471139430999755859375,
    "avg_price" : 5.962133916683182377482808078639209270477294921875
  } ],
  "current_car" : {
    "avg_market_value" : "avg_market_value",
    "price" : "price",
    "name" : "name",
    "miles" : "miles"
  },
  "similar_car_models" : [ {
    "avg_market_value" : 1.46581298050294517310021547018550336360931396484375,
    "name" : "name",
    "avg_miles" : 6.02745618307040320615897144307382404804229736328125,
    "avg_price" : 0.80082819046101150206595775671303272247314453125
  }, {
    "avg_market_value" : 1.46581298050294517310021547018550336360931396484375,
    "name" : "name",
    "avg_miles" : 6.02745618307040320615897144307382404804229736328125,
    "avg_price" : 0.80082819046101150206595775671303272247314453125
  } ]
}}]
     
     - parameter vin: (query) VIN as a reference to the type of car for which competitors data is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)

     - returns: RequestBuilder<CompetitorsPoint> 
     */
    open class func getCompetitionWithRequestBuilder(vin: String, apiKey: String? = nil) -> RequestBuilder<CompetitorsPoint> {
        let path = "/competition"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin
        ])
        

        let requestBuilder: RequestBuilder<CompetitorsPoint>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Depreciation
     
     - parameter vin: (query) VIN as a reference to the type of car for which Depreciation stats is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDepreciation(vin: String, apiKey: String? = nil, completion: @escaping ((_ data: DepreciationPoint?,_ error: Error?) -> Void)) {
        getDepreciationWithRequestBuilder(vin: vin, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Depreciation
     - GET /depreciation
     - [MOCK] Model resale value based on depreciation
     - examples: [{contentType=application/json, example={
  "similar_models" : [ {
    "five_year_from_now_percent" : 7.061401241503109105224211816675961017608642578125,
    "two_year_from_now" : 5.962133916683182377482808078639209270477294921875,
    "one_year_from_now" : 6.02745618307040320615897144307382404804229736328125,
    "five_year_from_now" : 2.3021358869347654518833223846741020679473876953125,
    "name" : "name",
    "one_year_from_now_percent" : 1.46581298050294517310021547018550336360931396484375,
    "two_year_from_now_percent" : 5.63737665663332876420099637471139430999755859375,
    "current_value" : 0.80082819046101150206595775671303272247314453125
  }, {
    "five_year_from_now_percent" : 7.061401241503109105224211816675961017608642578125,
    "two_year_from_now" : 5.962133916683182377482808078639209270477294921875,
    "one_year_from_now" : 6.02745618307040320615897144307382404804229736328125,
    "five_year_from_now" : 2.3021358869347654518833223846741020679473876953125,
    "name" : "name",
    "one_year_from_now_percent" : 1.46581298050294517310021547018550336360931396484375,
    "two_year_from_now_percent" : 5.63737665663332876420099637471139430999755859375,
    "current_value" : 0.80082819046101150206595775671303272247314453125
  } ]
}}]
     
     - parameter vin: (query) VIN as a reference to the type of car for which Depreciation stats is to be returned 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)

     - returns: RequestBuilder<DepreciationPoint> 
     */
    open class func getDepreciationWithRequestBuilder(vin: String, apiKey: String? = nil) -> RequestBuilder<DepreciationPoint> {
        let path = "/depreciation"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin
        ])
        

        let requestBuilder: RequestBuilder<DepreciationPoint>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Market Days Supply
     
     - parameter vin: (query) VIN to decode 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter exact: (query) Exact parameter (optional)
     - parameter latitude: (query) Latitude component of location (optional)
     - parameter longitude: (query) Longitude component of location (optional)
     - parameter radius: (query) Radius around the search location (optional)
     - parameter debug: (query) Debug parameter (optional)
     - parameter includeSold: (query) To fetch sold vins (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMDS(vin: String, apiKey: String? = nil, exact: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, debug: String? = nil, includeSold: String? = nil, completion: @escaping ((_ data: Mds?,_ error: Error?) -> Void)) {
        getMDSWithRequestBuilder(vin: vin, apiKey: apiKey, exact: exact, latitude: latitude, longitude: longitude, radius: radius, debug: debug, includeSold: includeSold).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Market Days Supply
     - GET /mds
     - Get the basic information on specifications for a car identified by a valid VIN
     - examples: [{contentType=application/json, example={
  "total_cars_sold_in_last_45_days" : 1.46581298050294517310021547018550336360931396484375,
  "mds" : 0.80082819046101150206595775671303272247314453125,
  "total_active_cars_for_ymmt" : 6.02745618307040320615897144307382404804229736328125
}}]
     
     - parameter vin: (query) VIN to decode 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter exact: (query) Exact parameter (optional)
     - parameter latitude: (query) Latitude component of location (optional)
     - parameter longitude: (query) Longitude component of location (optional)
     - parameter radius: (query) Radius around the search location (optional)
     - parameter debug: (query) Debug parameter (optional)
     - parameter includeSold: (query) To fetch sold vins (optional)

     - returns: RequestBuilder<Mds> 
     */
    open class func getMDSWithRequestBuilder(vin: String, apiKey: String? = nil, exact: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, debug: String? = nil, includeSold: String? = nil) -> RequestBuilder<Mds> {
        let path = "/mds"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin, 
            "exact": exact, 
            "latitude": latitude, 
            "longitude": longitude, 
            "radius": radius?.encodeToJSON(), 
            "debug": debug, 
            "include_sold": includeSold
        ])
        

        let requestBuilder: RequestBuilder<Mds>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Popularity
     
     - parameter year: (query) Year of the car 
     - parameter make: (query) Make of the car 
     - parameter model: (query) Model of the Car 
     - parameter trim: (query) Trim of the Car 
     - parameter bodyType: (query) Body type to filter the cars on. Valid values are the ones returned by body_type facets API call 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter stats: (query) The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPopularity(year: String, make: String, model: String, trim: String, bodyType: String, apiKey: String? = nil, stats: String? = nil, completion: @escaping ((_ data: [PopularityItem]?,_ error: Error?) -> Void)) {
        getPopularityWithRequestBuilder(year: year, make: make, model: model, trim: trim, bodyType: bodyType, apiKey: apiKey, stats: stats).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Popularity
     - GET /popularity
     - [MOCK] [Merged with the /search API - Please check the 'popularity' parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
     - examples: [{contentType=application/json, example=[ {
  "delta_percent" : 5.962133916683182377482808078639209270477294921875,
  "color" : "color",
  "left" : 0.80082819046101150206595775671303272247314453125,
  "difference" : 1.46581298050294517310021547018550336360931396484375,
  "text" : "text",
  "right" : 6.02745618307040320615897144307382404804229736328125,
  "thumbs" : "thumbs"
}, {
  "delta_percent" : 5.962133916683182377482808078639209270477294921875,
  "color" : "color",
  "left" : 0.80082819046101150206595775671303272247314453125,
  "difference" : 1.46581298050294517310021547018550336360931396484375,
  "text" : "text",
  "right" : 6.02745618307040320615897144307382404804229736328125,
  "thumbs" : "thumbs"
} ]}]
     
     - parameter year: (query) Year of the car 
     - parameter make: (query) Make of the car 
     - parameter model: (query) Model of the Car 
     - parameter trim: (query) Trim of the Car 
     - parameter bodyType: (query) Body type to filter the cars on. Valid values are the ones returned by body_type facets API call 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter stats: (query) The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)

     - returns: RequestBuilder<[PopularityItem]> 
     */
    open class func getPopularityWithRequestBuilder(year: String, make: String, model: String, trim: String, bodyType: String, apiKey: String? = nil, stats: String? = nil) -> RequestBuilder<[PopularityItem]> {
        let path = "/popularity"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "year": year, 
            "make": make, 
            "model": model, 
            "trim": trim, 
            "body_type": bodyType, 
            "stats": stats
        ])
        

        let requestBuilder: RequestBuilder<[PopularityItem]>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Trends for criteria
     
     - parameter vin: (query) VIN as a reference to the type of car for which trend data is to be returned 
     - parameter carType: (query) Car type. Allowed values are - new / used / certified 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter year: (query) Year of the car (optional)
     - parameter make: (query) Make of the car (optional)
     - parameter model: (query) Model of the Car (optional)
     - parameter trim: (query) Trim of the Car (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTrends(vin: String, carType: String, apiKey: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, completion: @escaping ((_ data: [TrendPoint]?,_ error: Error?) -> Void)) {
        getTrendsWithRequestBuilder(vin: vin, carType: carType, apiKey: apiKey, year: year, make: make, model: model, trim: trim).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Trends for criteria
     - GET /trends
     - Get historical market trends for cars matching the given VIN's basic specification or Year, Make, Model, Trim (Optional) criteria
     - examples: [{contentType=application/json, example=[ {
  "dom" : 1.46581298050294517310021547018550336360931396484375,
  "price" : 0.80082819046101150206595775671303272247314453125,
  "msrp" : 5.63737665663332876420099637471139430999755859375,
  "units" : 5.962133916683182377482808078639209270477294921875,
  "miles" : 6.02745618307040320615897144307382404804229736328125
}, {
  "dom" : 1.46581298050294517310021547018550336360931396484375,
  "price" : 0.80082819046101150206595775671303272247314453125,
  "msrp" : 5.63737665663332876420099637471139430999755859375,
  "units" : 5.962133916683182377482808078639209270477294921875,
  "miles" : 6.02745618307040320615897144307382404804229736328125
} ]}]
     
     - parameter vin: (query) VIN as a reference to the type of car for which trend data is to be returned 
     - parameter carType: (query) Car type. Allowed values are - new / used / certified 
     - parameter apiKey: (query) The API Authentication Key. Mandatory with all API calls. (optional)
     - parameter year: (query) Year of the car (optional)
     - parameter make: (query) Make of the car (optional)
     - parameter model: (query) Model of the Car (optional)
     - parameter trim: (query) Trim of the Car (optional)

     - returns: RequestBuilder<[TrendPoint]> 
     */
    open class func getTrendsWithRequestBuilder(vin: String, carType: String, apiKey: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil) -> RequestBuilder<[TrendPoint]> {
        let path = "/trends"
        let URLString = MarketcheckCarsApiAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "api_key": apiKey, 
            "vin": vin, 
            "car_type": carType, 
            "year": year, 
            "make": make, 
            "model": model, 
            "trim": trim
        ])
        

        let requestBuilder: RequestBuilder<[TrendPoint]>.Type = MarketcheckCarsApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
